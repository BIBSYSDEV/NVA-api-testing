/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nva.api.testing;


import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.cognitoidentityprovider.CognitoIdentityProviderClient;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminInitiateAuthRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminInitiateAuthResponse;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminSetUserPasswordRequest;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AdminSetUserPasswordResponse;
import software.amazon.awssdk.services.cognitoidentityprovider.model.AuthFlowType;

import java.util.Map;
import java.util.Random;
import java.util.stream.Collectors;

public final class AuthenticationMethods {

    public static final String USERNAME = "USERNAME";
    public static final String PASSWORD = "PASSWORD";

    private AuthenticationMethods() {
    }

    public static String getIdToken(String username, String clientId, String userPoolId) {
        ProfileCredentialsProvider credentials =
                ProfileCredentialsProvider.create();
        try {
            CognitoIdentityProviderClient client = CognitoIdentityProviderClient.builder()
                    .credentialsProvider(credentials)
                    .region(Region.EU_WEST_1)
                    .build();

            String password = generatePassword();

            adminSetUserPassword(client, username, password, userPoolId);
            AdminInitiateAuthResponse authResponse = adminInitiateAuth(
                    client,
                    username,
                    password,
                    clientId,
                    userPoolId
            );

            return authResponse.authenticationResult().idToken();
        } catch (Exception e) {
            throw new RuntimeException("Error getting IdToken from Cognito: " + e.getMessage(), e);
        } finally {
            credentials.close();

        }
    }

    private static String generatePassword() {
        return new Random()
                .ints(10, 33, 122)
                .mapToObj(i -> String.valueOf((char)i))
                .collect(Collectors.joining());
    }

    private static AdminInitiateAuthResponse adminInitiateAuth(
            CognitoIdentityProviderClient client,
            String username,
            String password,
            String clientId,
            String userPoolId) {
        AdminInitiateAuthRequest request = AdminInitiateAuthRequest.builder()
                .authFlow(AuthFlowType.ADMIN_USER_PASSWORD_AUTH)
                .userPoolId(userPoolId)
                .clientId(clientId)
                .authParameters(Map.of(USERNAME, username, PASSWORD, password))
                .build();

        return client.adminInitiateAuth(request);
    }

    private static AdminSetUserPasswordResponse adminSetUserPassword(
            CognitoIdentityProviderClient client,
            String username,
            String password,
            String userPoolId) {
        AdminSetUserPasswordRequest request = AdminSetUserPasswordRequest.builder()
                .username(username)
                .password(password)
                .userPoolId(userPoolId)
                .permanent(Boolean.TRUE)
                .build();

         return client.adminSetUserPassword(request);
    }

}
